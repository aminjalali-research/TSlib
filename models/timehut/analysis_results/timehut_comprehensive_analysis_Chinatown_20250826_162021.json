{
  "analysis_timestamp": "2025-08-26T16:20:13.079722",
  "dataset": "Chinatown",
  "loader": "UCR",
  "analysis_components": {
    "code_analysis": {
      "original_train_analysis": {
        "has_pyhopper": true,
        "pyhopper_lines": [
          "import pyhopper",
          "search = pyhopper.Search(",
          "\"min_tau\": pyhopper.float(0,0.3, \"0.05f\"),",
          "\"max_tau\": pyhopper.float(0.5,1, \"0.05f\"),",
          "\"t_max\"  : pyhopper.float(1,20, \"0.5f\"),"
        ],
        "search_steps": [
          "temp_settings = search.run(objective, \"maximize\", steps=10, n_jobs=1)"
        ],
        "has_optimization": true,
        "file_size": 6959
      },
      "custom_amc_analysis": {
        "bypasses_pyhopper": false,
        "direct_amc_config": true,
        "direct_temp_config": true,
        "amc_config_lines": [
          "def train_model_with_amc(config, temp_dictionary=None, amc_setting=None, type=\"full\"):",
          "amc_setting=amc_setting,  # \u26a1 CRITICAL: Pass AMC settings",
          "amc_setting = {"
        ],
        "temp_config_lines": [
          "temp_settings = {",
          "final_res = train_model_with_amc(config, temp_dictionary=temp_settings, amc_setting=amc_setting, type=\"full\")"
        ],
        "file_size": 5257
      },
      "runtime_hypothesis": {
        "primary_factor": "Unknown - need further investigation",
        "confirmed": false
      },
      "code_differences": []
    },
    "runtime_simulation": {
      "previous_timehut": {
        "approach": "PyHopper hyperparameter search",
        "steps": [
          [
            "PyHopper setup",
            0.5
          ],
          [
            "Search validation (10 steps)",
            22.0
          ],
          [
            "Final training",
            8.0
          ],
          [
            "Evaluation & overhead",
            2.8
          ]
        ],
        "total_time": 33.3,
        "training_cycles": 11
      },
      "timehut_amc": {
        "approach": "Direct training with fixed AMC parameters",
        "steps": [
          [
            "Direct setup",
            0.3
          ],
          [
            "Single training",
            6.5
          ],
          [
            "Evaluation & overhead",
            1.6
          ]
        ],
        "total_time": 8.4,
        "training_cycles": 1
      },
      "analysis": {
        "speedup_factor": 3.964285714285714,
        "cycle_ratio": 11.0,
        "primary_bottleneck": "PyHopper hyperparameter search (66% of total time)",
        "efficiency_gain": "Eliminated 10 validation training cycles"
      }
    },
    "live_test": {
      "success": true,
      "execution_time": 8.575847274001717,
      "training_time": 8.3,
      "accuracy": 0.9738,
      "auprc": 0.9738,
      "stdout_sample": "\ud83d\udcca Generating Final Report...\n\ud83d\udcc4 Markdown report saved: /home/amin/TSlib/results/master_benchmark_20250826_162013/BENCHMARK_REPORT.md\n\u2705 Final report saved: /home/amin/TSlib/results/master_benchmark_20250826_162013/benchmark_report.json\n\ud83d\udcc8 Summary: 1/1 successful runs\n\ud83c\udfc6 Best overall accuracy: 0.9738\n\n================================================================================\n\ud83c\udf89 Benchmarking Pipeline Complete!\n================================================================================\n"
    },
    "scenario_definitions": [
      {
        "name": "baseline_vanilla",
        "description": "Pure TS2Vec without AMC or temperature scheduling",
        "amc_instance": 0.0,
        "amc_temporal": 0.0,
        "temp_method": "none",
        "hypothesis": "Should match TimeHUT Previous runtime (~33s) if using PyHopper"
      },
      {
        "name": "amc_instance_only",
        "description": "Instance-wise AMC only (temporal disabled)",
        "amc_instance": 0.5,
        "amc_temporal": 0.0,
        "temp_method": "none",
        "hypothesis": "Should improve accuracy with moderate runtime increase"
      },
      {
        "name": "amc_temporal_only",
        "description": "Temporal AMC only (instance disabled)",
        "amc_instance": 0.0,
        "amc_temporal": 0.5,
        "temp_method": "none",
        "hypothesis": "Should improve temporal understanding with some overhead"
      },
      {
        "name": "amc_balanced",
        "description": "Balanced AMC (both instance and temporal active)",
        "amc_instance": 0.5,
        "amc_temporal": 0.5,
        "temp_method": "none",
        "hypothesis": "Should match TimeHUT+AMC performance (~8.4s) - the fast configuration!"
      },
      {
        "name": "amc_minimal",
        "description": "Minimal AMC coefficients for subtle enhancement",
        "amc_instance": 0.1,
        "amc_temporal": 0.1,
        "temp_method": "none",
        "hypothesis": "Should be close to baseline with minor improvements"
      },
      {
        "name": "amc_aggressive",
        "description": "High AMC coefficients for maximum margin enforcement",
        "amc_instance": 1.0,
        "amc_temporal": 1.0,
        "temp_method": "none",
        "hypothesis": "May be slow but highly discriminative"
      },
      {
        "name": "temp_cosine_only",
        "description": "Cosine temperature scheduling without AMC",
        "amc_instance": 0.0,
        "amc_temporal": 0.0,
        "temp_method": "cosine_annealing",
        "hypothesis": "Should show training efficiency gains"
      },
      {
        "name": "amc_temp_cosine",
        "description": "Balanced AMC with cosine temperature scheduling",
        "amc_instance": 0.5,
        "amc_temporal": 0.5,
        "temp_method": "cosine_annealing",
        "hypothesis": "Should achieve best performance with reasonable runtime"
      },
      {
        "name": "mystery_fast_config",
        "description": "Exact configuration that achieved 8.4s runtime",
        "amc_instance": 0.5,
        "amc_temporal": 0.5,
        "temp_method": "cosine_annealing",
        "hypothesis": "This configuration bypasses PyHopper optimization"
      }
    ]
  },
  "summary": {
    "mystery_solved": false,
    "primary_finding": "Analysis in progress",
    "key_insights": [
      "Theoretical speedup factor: 4.0x",
      "Primary bottleneck: PyHopper hyperparameter search (66% of time)",
      "Live test confirmed: 8.3s runtime"
    ],
    "recommendations": [
      "Use direct training with pre-tuned AMC parameters for production",
      "Reserve PyHopper optimization for research and parameter discovery",
      "AMC balanced configuration (instance=0.5, temporal=0.5) provides optimal trade-off",
      "Cosine annealing temperature scheduling improves convergence stability"
    ],
    "verified_metrics": {
      "runtime": 8.3,
      "accuracy": 0.9738,
      "auprc": 0.9738
    }
  }
}